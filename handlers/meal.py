"""handlers/meal.py ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ c –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""

from __future__ import annotations

import asyncio
import json
import re
from datetime import datetime
from zoneinfo import ZoneInfo

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from openai import AsyncOpenAI, OpenAIError
from sqlmodel import select

from config import settings
from models_and_db import get_session, User, Meal
from handlers.menu import menu_button

router = Router()
MSK = ZoneInfo("Europe/Moscow")

# ------------- OpenAI -------------
client = AsyncOpenAI(api_key=settings.OPENAI_API_KEY)

GPT_SYSTEM = (
    "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–∏—ë–º –ø–∏—â–∏. "
    "–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏ food (—Å—Ç—Ä–æ–∫–∞) –∏ calories (—Ü–µ–ª–æ–µ)."
)
KCAL_RE = re.compile(r"(\d{2,4})\s*–∫?–∫–∞–ª", re.I)
DEFAULT_KCAL = 250


async def gpt_estimate_meal(text: str) -> dict | None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç GPT, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict {food, calories} –ª–∏–±–æ None."""
    try:
        resp = await client.chat.completions.create(
            model=settings.GPT_MODEL,
            response_format={"type": "json_object"},
            temperature=0.3,
            messages=[
                {"role": "system", "content": GPT_SYSTEM},
                {"role": "user", "content": text},
            ],
        )
        return json.loads(resp.choices[0].message.content)
    except (OpenAIError, json.JSONDecodeError, KeyError):
        return None


# ------------- FSM -------------
class MealState(StatesGroup):
    enter_desc = State()
    confirm = State()


# ------------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã -------------
def confirm_kb() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data="meal_add")
    kb.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="meal_cancel")
    kb.button(text="üè† –ú–µ–Ω—é", callback_data="menu")
    kb.adjust(1)
    return kb.as_markup()


def after_add_kb() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –±–ª—é–¥–æ", callback_data="meal_again")
    kb.button(text="üè† –ú–µ–Ω—é", callback_data="menu")
    kb.adjust(1)
    return kb.as_markup()


# ------------- handlers -------------
@router.callback_query(F.data == "add_meal")
async def ask_desc(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(MealState.enter_desc)
    await call.message.edit_text(
        "–û–ø–∏—à–∏ –ø—Ä–∏—ë–º –ø–∏—â–∏ (–ø—Ä–∏–º–µ—Ä: ¬´–û–≤—Å—è–Ω–∫–∞ —Å –±–∞–Ω–∞–Ω–æ–º 300 –≥¬ª)",
        reply_markup=menu_button(),
    )


@router.message(MealState.enter_desc)
async def process_desc(msg: types.Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not text:
        await msg.answer("–û–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ ü§î –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    # GPT-–æ—Ü–µ–Ω–∫–∞
    data = await gpt_estimate_meal(text) or {}
    calories = int(
        abs(
            data.get("calories")
            or (m := KCAL_RE.search(text)) and m.group(1)
            or DEFAULT_KCAL
        )
    )
    food = data.get("food") or text.split(",")[0][:64]

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(raw=text, food=food, calories=calories)

    await msg.answer(
        f"–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏:\n<b>{food}</b>\n–ö–∞–ª–æ—Ä–∏–∏: <b>{calories} –∫–ö–∞–ª</b> ?",
        reply_markup=confirm_kb(),
    )
    await state.set_state(MealState.confirm)


@router.callback_query(MealState.confirm, F.data == "meal_cancel")
async def cancel(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(MealState.enter_desc)
    await call.message.edit_text(
        "–•–æ—Ä–æ—à–æ, –æ–ø–∏—à–∏ –ø—Ä–∏—ë–º –ø–∏—â–∏ –∑–∞–Ω–æ–≤–æ:",
        reply_markup=menu_button(),
    )


@router.callback_query(MealState.confirm, F.data == "meal_add")
async def add(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    raw, food, calories = data["raw"], data["food"], data["calories"]

    with get_session() as s:
        user = s.exec(select(User).where(User.chat_id == call.from_user.id)).first()
        s.add(
            Meal(
                user_id=user.id,
                created_at=datetime.utcnow(),  # ‚Üê –±—ã–ª–æ datetime.now(tz=MSK)
                raw_text=raw[:512],
                description=food[:128],
                calories=calories,
            )
        )
        s.commit()

    await call.message.edit_text(
        f"üçΩÔ∏è –ü—Ä–∏—ë–º –ø–∏—â–∏ –¥–æ–±–∞–≤–ª–µ–Ω!\n<i>{food}</i>: <b>{calories} –∫–ö–∞–ª</b>",
        reply_markup=after_add_kb(),
    )
    await state.clear()


@router.callback_query(F.data == "meal_again")
async def again(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(MealState.enter_desc)
    await call.message.edit_text(
        "–û–ø–∏—à–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏—ë–º –ø–∏—â–∏:",
        reply_markup=menu_button(),
    )
