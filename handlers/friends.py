"""handlers/friends.py ‚Äî —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π, –∑–∞–ø—Ä–æ—Å—ã –∏ –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""

from __future__ import annotations

from datetime import datetime, timezone, time as dtime
from math import ceil
from zoneinfo import ZoneInfo

from aiogram import Router, F, Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlmodel import select, or_

from models_and_db import (
    get_session,
    User,
    Friend,
    FriendRequest,
    Meal,
)
from handlers.analytics import calc_stats
from handlers.menu import menu_button

router = Router()

MSK = ZoneInfo("Europe/Moscow")
PER_PAGE = 5  # –¥—Ä—É–∑–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê FSM ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
class FriendState(StatesGroup):
    enter_username = State()


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê helpers ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
def today_interval() -> tuple[datetime, datetime]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (start, end) –≤ naive-UTC, –≥–¥–µ
    start = 00:00 –ø–æ –ú–æ—Å–∫–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è, end = —Ç–µ–∫—É—â–µ–µ UTC-–≤—Ä–µ–º—è.
    """
    now_msk = datetime.now(MSK)
    start_msk = datetime.combine(now_msk.date(), dtime.min, tzinfo=MSK)
    start_utc = start_msk.astimezone(timezone.utc).replace(tzinfo=None)
    end_utc = datetime.utcnow()
    return start_utc, end_utc


def list_friends(user_id: int) -> list[User]:
    with get_session() as s:
        return s.exec(
            select(User)
            .join(Friend, Friend.friend_id == User.id)
            .where(Friend.user_id == user_id)
            .order_by(User.username)
        ).all()


def fmt(n: int | float) -> str:
    return f"{int(n):,}".replace(",", " ")


def to_msk(dt: datetime) -> datetime:
    return dt.replace(tzinfo=timezone.utc).astimezone(MSK)


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê keyboards ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
def friends_page_kb(me_id: int, page: int = 0) -> types.InlineKeyboardMarkup:
    friends = list_friends(me_id)
    total_pages = max(1, ceil(len(friends) / PER_PAGE))
    start, end = page * PER_PAGE, page * PER_PAGE + PER_PAGE

    kb = InlineKeyboardBuilder()
    for fr in friends[start:end]:
        kb.button(text=fr.username or str(fr.chat_id), callback_data=f"fr_view_{fr.id}")

    if page > 0:
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"fr_page_{page-1}")
    if page < total_pages - 1:
        kb.button(text="–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=f"fr_page_{page+1}")

    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="fr_add")
    kb.button(text="üè† –ú–µ–Ω—é", callback_data="menu")
    kb.adjust(1)
    return kb.as_markup()


def confirm_kb(req_id: int) -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úì –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"fr_ok_{req_id}")
    kb.button(text="‚úñÔ∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"fr_no_{req_id}")
    kb.adjust(2)
    return kb.as_markup()


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê —Å–ø–∏—Å–æ–∫ / –ø–∞–≥–∏–Ω–∞—Ü–∏—è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
@router.callback_query(F.data == "friends")
async def friends_main(call: types.CallbackQuery):
    with get_session() as s:
        me = s.exec(select(User).where(User.chat_id == call.from_user.id)).first()

    await call.message.edit_text(
        "<b>–î—Ä—É–∑—å—è</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:",
        reply_markup=friends_page_kb(me.id, 0),
    )


@router.callback_query(F.data.startswith("fr_page_"))
async def friends_page(call: types.CallbackQuery):
    page = int(call.data.split("_")[2])
    with get_session() as s:
        me = s.exec(select(User).where(User.chat_id == call.from_user.id)).first()

    await call.message.edit_reply_markup(reply_markup=friends_page_kb(me.id, page))


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä—É–≥–∞ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
@router.callback_query(F.data.startswith("fr_view_"))
async def friend_details(call: types.CallbackQuery):
    friend_id = int(call.data.split("_")[2])

    with get_session() as s:
        fr = s.get(User, friend_id)
    if not fr:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    start, end = today_interval()
    stats = calc_stats(fr, start, end)

    with get_session() as s:
        meals = (
            s.exec(
                select(Meal)
                .where(
                    (Meal.user_id == fr.id) & (Meal.created_at.between(start, end))
                )
                .order_by(Meal.created_at)
            ).all()
        )
    meals_block = (
        "\n".join(
            f"‚Ä¢ {to_msk(m.created_at):%H:%M} ‚Äî {m.description} ({m.calories} –∫–∫–∞–ª)"
            for m in meals
        )
        or "–Ω–µ—Ç"
    )

    text = (
        f"<b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {fr.username or fr.chat_id}</b>\n"
        f"{to_msk(start):%d.%m %H:%M} ‚Äî {to_msk(end):%H:%M}\n\n"
        f"<b>I. –í–µ—Å</b>\n"
        f"–ë—ã–ª–æ: {stats['start_w']} –∫–≥ ‚Üí –°—Ç–∞–ª–æ: {stats['end_w']} –∫–≥\n"
        f"Œî: <b>{stats['delta_w']} –∫–≥</b>\n\n"
        f"<b>II. –ö–∞–ª–æ—Ä–∏–∏</b>\n"
        f"–°—ä–µ–¥–µ–Ω–æ: +{fmt(stats['meals'])} –∫–∫–∞–ª\n"
        f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {fmt(stats['workouts'])} –∫–∫–∞–ª\n"
        f"–ú–µ—Ç–∞–±–æ–ª–∏–∑–º: {fmt(stats['metab'])} –∫–∫–∞–ª\n"
        f"–ë–∞–ª–∞–Ω—Å: <b>{fmt(stats['balance'])} –∫–∫–∞–ª</b>\n\n"
        f"<b>–ü—Ä–∏—ë–º—ã –ø–∏—â–∏:</b>\n{meals_block}\n\n"
        f"<b>III. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n"
        f"–í—Å–µ–≥–æ: {stats['workouts_cnt']}\n"
        f"–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ: {', '.join(stats['popular']) or '–Ω–µ—Ç'}"
    )

    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="friends")
    kb.button(text="üè† –ú–µ–Ω—é",  callback_data="menu")
    kb.adjust(1)
    await call.message.edit_text(text, reply_markup=kb.as_markup())


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
@router.callback_query(F.data == "fr_add")
async def ask_username(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(FriendState.enter_username)
    await call.message.edit_text("–í–≤–µ–¥–∏ @username –¥—Ä—É–≥–∞:", reply_markup=menu_button())


@router.message(FriendState.enter_username)
async def process_username(msg: types.Message, state: FSMContext, bot: Bot):
    raw = (msg.text or "").strip()
    uname = raw if raw.startswith("@") else f"@{raw}"

    if uname.lower() == f"@{(msg.from_user.username or '').lower()}":
        await msg.answer("–≠—Ç–æ —Ç—ã —Å–∞–º üôÇ", reply_markup=menu_button())
        await state.clear()
        return

    # –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
    with get_session() as s:
        target_user = s.exec(
            select(User).where(User.username.ilike(uname.lstrip("@")))
        ).first()

    if target_user:
        target_chat_id = target_user.chat_id
    else:
        try:
            chat = await bot.get_chat(uname)
            target_chat_id = chat.id
        except Exception:
            await msg.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                "–£–±–µ–¥–∏—Å—å, —á—Ç–æ –¥—Ä—É–≥ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∏ username —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ.",
                reply_markup=menu_button(),
            )
            await state.clear()
            return

    with get_session() as s:
        me = s.exec(select(User).where(User.chat_id == msg.from_user.id)).first()
        target = s.exec(select(User).where(User.chat_id == target_chat_id)).first()

        if not target:
            await msg.answer(
                "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞.", reply_markup=menu_button()
            )
            await state.clear()
            return

        # —É–∂–µ –¥—Ä—É–∑—å—è?
        if s.exec(
            select(Friend).where(
                (Friend.user_id == me.id) & (Friend.friend_id == target.id)
            )
        ).first():
            await msg.answer("–í—ã —É–∂–µ –¥—Ä—É–∑—å—è!", reply_markup=menu_button())
            await state.clear()
            return

        # –æ–∂–∏–¥–∞—é—â–∏–π –∑–∞–ø—Ä–æ—Å?
        if s.exec(
            select(FriendRequest).where(
                or_(
                    (FriendRequest.from_id == me.id) & (FriendRequest.to_id == target.id),
                    (FriendRequest.from_id == target.id) & (FriendRequest.to_id == me.id),
                ),
                FriendRequest.status == "pending",
            )
        ).first():
            await msg.answer("–£–∂–µ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π –∑–∞–ø—Ä–æ—Å.", reply_markup=menu_button())
            await state.clear()
            return

        req = FriendRequest(from_id=me.id, to_id=target.id)
        s.add(req)
        s.commit()
        req_id = req.id

    await msg.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=menu_button())
    await bot.send_message(
        target_chat_id,
        f"@{msg.from_user.username or msg.from_user.id} —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–±—è –≤ –¥—Ä—É–∑—å—è.",
        reply_markup=confirm_kb(req_id),
    )
    await state.clear()


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ / –æ—Ç–∫–∞–∑ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
@router.callback_query(F.data.startswith("fr_ok_"))
async def req_accept(call: types.CallbackQuery):
    req_id = int(call.data.split("_")[2])

    with get_session() as s:
        req = s.get(FriendRequest, req_id)
        if not req or req.status != "pending":
            await call.answer("–ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª.", show_alert=True)
            return

        req.status = "accepted"
        s.add_all(
            [
                Friend(user_id=req.from_id, friend_id=req.to_id),
                Friend(user_id=req.to_id, friend_id=req.from_id),
            ]
        )
        s.commit()
        from_user = s.get(User, req.from_id)

    await call.message.edit_text("üöÄ –í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –¥—Ä—É–∑—å—è!", reply_markup=menu_button())
    await call.bot.send_message(
        from_user.chat_id, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –ø—Ä–∏–Ω—è—Ç!", reply_markup=menu_button()
    )


@router.callback_query(F.data.startswith("fr_no_"))
async def req_decline(call: types.CallbackQuery):
    req_id = int(call.data.split("_")[2])

    with get_session() as s:
        req = s.get(FriendRequest, req_id)
        if req and req.status == "pending":
            req.status = "declined"
            s.add(req)
            s.commit()

    await call.message.edit_text("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.", reply_markup=menu_button())
